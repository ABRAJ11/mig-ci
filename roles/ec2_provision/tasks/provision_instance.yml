- name: Get AWS account information
  local_action:
    module: aws_caller_facts
  register: caller_facts

- set_fact:
    aws_resource_tag: "{{ prefix + instance_name + caller_facts.arn | hash('md5') }}"

- name: Check if selected instance already exists
  local_action:
    module: ec2_instance_facts
    filters:
      "tag:Name": "{{ prefix }}-{{ instance_name }}"
      "tag:creator": "{{ aws_resource_tag }}"
  register: ec2_instance

- set_fact:
    ec2_created: "{{ 'running' in (ec2_instance.instances | selectattr('state') | map(attribute='state.name') | list | unique) }}"

- name: Create AWS EC2 instance
  block:
    - name: Create VPC
      ec2_vpc_net:
        name: "{{ prefix }}-{{ instance_name }}"
        cidr_block: "{{ cidr }}"
        tags:
          creator: "{{ aws_resource_tag }}"
      register: ec2_vpc

    - name: Create VPC subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ ec2_vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        resource_tags:
          creator: "{{ aws_resource_tag }}"
      register: ec2_subnet

    - name: Create VPC Internet Gateway
      ec2_vpc_igw:
        vpc_id: "{{ ec2_vpc.vpc.id }}"
        tags:
          Name: "{{ prefix }}-{{ instance_name }}"
          creator: "{{ aws_resource_tag }}"
      register: ec2_igw

    - name: Create VPC Routing Table
      ec2_vpc_route_table:
        vpc_id: "{{ ec2_vpc.vpc.id }}"
        tags:
          Name: "{{ prefix }}-{{ instance_name }}"
          creator: "{{ aws_resource_tag }}"
        subnets:
        - "{{ ec2_subnet.subnet.id }}"
        routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ ec2_igw.gateway_id }}"

    - name: Create Security Group
      include_tasks: "{{ security_group_type }}_security_group.yml"

    - name: Add additional tags to the Security Group
      block:
        - ec2_group_facts:
            filters:
              group-name: "{{ prefix }}-{{ instance_name }}"
          register: ec2_sec_gr

        - ec2_tag:
            resource: "{{ ec2_sec_gr.security_groups[0].group_id }}"
            tags: "{{ sec_group_additional_tags }}"
      when: sec_group_additional_tags is defined

    - name: Find a Suitable AMI
      ec2_ami_facts:
        owners: 309956199498
        filters:
          "name": "RHEL-{{ rhel_version }}_HVM_GA*"
      register: ami

    - set_fact:
        suggested_ami: "{{ ami.images | map(attribute='image_id') | list | first }}"

    - set_fact:
        inst_tags:
          Name: "{{ prefix }}-{{ instance_name }}"
          creator: "{{ aws_resource_tag }}"

    - set_fact:
        inst_tags: "{{ inst_tags | combine(additional_tags) }}"
      when: additional_tags is defined

    - name: Prepare instance additional tags
      set_fact:
        volume_path: '/dev/sda1' # Default mount path for block storage
        instance_args: {}

    - set_fact:
        instance_args:
          volumes:
          - device_name: "{{ volume_path }}"
            volume_type: gp2
            volume_size: "{{ ec2_volume_size }}"
            delete_on_termination: true
      when: ec2_volume_size is defined

    - name: Create Instance
      ec2:
        key_name: "{{ ec2_key }}"
        instance_type: "{{ instance_type }}"
        group: "{{ prefix }}-{{ instance_name }}"
        image: "{{ suggested_ami }}"
        count: 1
        vpc_subnet_id: "{{ ec2_subnet.subnet.id }}"
        assign_public_ip: yes
        instance_tags: "{{ inst_tags }}"
        wait: yes
      args: "{{ instance_args }}"
      register: ec2_inst

    - name: Add additional tags to a volume
      ec2_tag:
        resource: "{{ item.block_device_mapping[volume_path].volume_id }}"
        tags: "{{ volume_additional_tags }}"
      when: volume_additional_tags is defined
      with_items: "{{ ec2_inst.instances }}"
  when: not ec2_created
